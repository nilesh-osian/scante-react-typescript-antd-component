# .github/workflows/ci-cd-pipeline.yml

name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger the workflow on pushes to the main branch
  pull_request:
    branches:
      - main  # Optionally, trigger on pull requests to main

jobs:
  prebuild:
    name: Prebuild
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'  # Ensure Node.js version >=20.8.1
          cache: 'npm'           # Cache npm dependencies for faster installs

      # 3. Install dependencies
      - name: Install Dependencies
        run: npm install

      # 4. Run Linting
      - name: Run Lint
        run: npm run lint

      # 5. Run Tests
      - name: Run Tests
        run: npm test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: prebuild  # Ensures Build job runs after Prebuild job succeeds

    steps:
      # 1. Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      # 3. Install dependencies
      - name: Install Dependencies
        run: npm install

      # 4. Build the project
      - name: Build the Project
        run: npm run build

      # 5. Verify build artifacts
      - name: Verify Build Artifacts
        run: |
          ls -la ./dist  # List the contents of the dist directory
          # Optionally, run additional checks or tests here

      # 6. Upload build artifacts for subsequent jobs
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ./dist  # Path to the build output directory
        

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build  # Ensures Release job runs after Build job succeeds

    steps:
      # 1. Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org/'  # Set npm registry
          cache: 'npm'

      # 3. Download build artifacts from Build job
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./dist  # The path where artifacts will be downloaded

      # 4. Configure npm for authentication
      - name: Configure npm for Authentication
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # 5. Verify npm authentication
      - name: Verify npm Authentication
        run: npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # 6. Install dependencies (including semantic-release)
      - name: Install Dependencies
        run: npm install

      # 7. Run Semantic Release
      - name: Run Semantic Release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

      # 8. Commit and Push `dist` Folder
      - name: Commit and Push Dist Folder
        if: steps.semantic_release.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Configure Git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if dist has changes
          if [ -n "$(git status --porcelain ./dist)" ]; then
            # Stage dist folder
            git add dist

            # Commit changes with [skip ci] to prevent infinite loops
            git commit -m "chore: update dist folder [skip ci]"

            # Push changes
            git push
          else
            echo "No changes in dist folder to commit."
          fi

      # 8. (Optional) Display Release Output
      - name: Display Release Output
        if: steps.semantic_release.outcome == 'success'
        run: echo "Release successfully published."

